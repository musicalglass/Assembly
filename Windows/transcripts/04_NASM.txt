You remember in a previous episode we created an Assembly file. 
Next we're going to Assemble our code into a Binary file. 
Now isn't that called Compiling using a Compiler? 
Well you could use the term interchangeably. 
But if you want to get technical we're going to be 
working in a Lower Level Programming Language. 
So we will be Assembling our code. So hopefully if you've been following this series you have installed NASM and set up a path in the environment variables. 
We'll also want a Hex Editor. I'll be using HxD Hex Editor in this case.
I would like to give a moment of homage and tribute to Nick Blundell.
Who's Lower Level Programming series on YouTube really helped shed some light on this obscure topic, and without whom much of this might not have been possible. 
My hero! 

Leave it to a British chap to put lower level programming into right proper English innit?

So starting out I'm gonna right-click on the Explorer here that brings up our favorites we're going to go to the Assembly folder. There. There is our test file which we've set up to be recognized by Notepad++. Nice. By default. 
As you know we can Alt P, and... There. 
You can see the contents of the file, a great big zero. 
Alt P back out of there.
I'm going to put this over here, OK? 
And then I want to left click here, where there's these foldery looking things. 
If I left click it turns into a path that's already highlighted. 
I can Ctrl C and then I'm going to head over to the Command Prompt there and change directories. I can just right click in the window and it automatically pastes it. Nice. 
And there. So now I'm there. 
OK so ...
 
First thing we wanna do is make sure that NASM is installed and running. We can just go -v and check the version number and there. It tells us the latest version is installed, ready to go, and is recognized from the Command Line because we have set it up to do so. Wonderful! 
And so without further ado let's call NASM. Type of file (-t) will be a Binary (bin)
 
The name of the output are a binary type T Tab to find the file 
 
Name of output will be binary.bin How's that? Just to be redundant. You know, say the same thing two different ways. If you know what I'm saying. If you catch my double entendre. And bob's your uncle! There we go. We have successfully just created our binary file there. 
  
There it is. OK, so normally you could try to double click on that, you know, and it would just open Notepad and show you nothing. Because that's what we wrote into it. Nothing. 
I couldn't it view it from the Command Prompt either. No. You need a special application which we have installed, and set it up to be our default reader, which is HxD, which can read binary files.
 
And so we can call that from down here or the Command Prompt
Now let me go CD back to where I was... and 
there. We just want to go look at B Tab, 
 
Enter. There. And there is our Hex Editor. 
As you can see, you know we wrote a zero in there. And what we've actually written is zero zero zero zero zero zero zero  zero. Eight zeros, or a Byte. 8 Bits. 
Let's see... This much is a Nibble, and this much is a byte. 
I've never heard of anybody working in Nibbles, but that's your computer terminology. So one bite of information here expressed as hexadecimal. And it's also a 0 there, right? So I could go in here, right in our Hex Editor and change this to a 1, and hit Enter. It updates it over here as well. Now it's in red indicating that it hasn't been saved. Okay what if I change this one to say a 9? This is the Decimal equivalent 
 
So here it's in Binary. And as you can see our Binary representation is 8 plus 1 equals 9 in Binary. As you know it's 1, 2, 4, 8, 16, 32, 64, 128 places in Binary. So that's the value 9 same in Hexadecimal. Now what if I change this to 10 there? There's 10 in Binary. But what happened over here? It just turned into an A. See, that's because we are looking in Hexadecimal. 
Fortunately we have a reference right here in front of us. 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.  Because it's 16 places in Hexadecimal. This being 15, and so counting 0, 16 places in Hexadecimal. 
Power of 16. Binary being power of 2, Decimal, power of 10. Just different ways of expressing the same value. But it's all 1s and 0s to the computer, you know? 
It's basically a bunch of electronic switches, you know what I'm saying? 
If this switch is turned on and this switch is turned on, then do something, depending on the context in which the value was used. So I could go over here. Now here we have a 0A and what if I type 0F? Okay now everything disappears over here. But I think if I click at the beginning of the line...
Yeah good. And there you go. There's the value expressed as Binary and Decimal value. Okay, so now what if I change this to FF? 
Enter. Click there. OK. 
Here we have a positive value of 255. As you can see FF is the maximum that can you can hold in there. It's all filled up with 1s. 255. But what's going on over here? This has turned to a negative value in signed. So this same value could be used more than one different way to the computer, or to the programmer even. 
Here we're using a Signed Integer and here an Unsigned Integer. What's that mean? Well you have a limited amount of space that you can store in one byte. 255. Counting 0, 256 places. 
 
Right? So if you wanted to deal in negative numbers, how do you go about that? 

Well basically you make half of this positive and the other half negative. So essentially this leading value in Binary, if we're dealing in Signed Integers, tells it whether it's positive or negative. If this is a 1, the value will be negative, and if it's a 0 the value will be positive. You see? 
So what happens here, I got 127.  I'm going to change that to 128 
You see? It flipped over to a 1 here, and this went negative now. -128 see? 
So now if I add 1 more to that 129... You see? It added 1 more to -128. -128 plus 1 is -127. You see.
So the way that works out... 
Let me go all the way up to 254. 11111110 right so you know where we've climbed all the way up to a negative to say will go to 
two fifty five 
 
when we're not we're full up that's that's as high as we can go in this value here it's negative one in signed integer value. Now what happens if we take -1 and add 1 to it? 
 
what what do we get Okay. So what happens inside the computer is: this value here should now roll over and then the 1 will go off the screen somewhere over here 
 
(It doesn't actually disappear it's written to a flag. You know, so you can check a value. But that's another topic. But when this rolls over, if we add 1 more to this 256 row... The Hex Editor won't let us. We want to add one more to this. But if we do what happens is you get an overflow. before 
 
one two three four 
the negative one becomes 0 see? So adding 1 results in an overflow. But it is the correct value when you're dealing in positive and negative working in signed integers. 
Alternatively if you're working in unsigned, then you have all positive values (except for zero unless you consider a positive value) right? Okay hope I'm not not spending too much explaining all that.
Let's see, what else can we do here? 
Okay so, we can take a look at our file now for a moment. Save changes? No, I'm good on that. 
 
So we can do that from the Command Line here I'll just go 
T Tab for test and it launches Notepad. Click. Some weirdness there other of the DB 0 we wrote is aaron alright. I can write a lot of 0s. I could write another one. I could go to another line and do a DB 0 again like that, you know? 
But another shortcut, since we're calling the same command here twice in a row. I could just use a comma. There. 
DB 0, DB 0 
Let me see that. Go over here to the Command Line
If I Up Arrow a few times 
 
No, I would have to call NASM again from a new window...  
Hang on here let me show you another trick real quick. And a sm 
 
-B for Binary
T Tab -O 
I can just type B Tab because the name is already in there and it finds it. Hit Enter and overwrite. 
That's a bit of typing. you know? 
Maybe i don't want to do that again next time. 
Our binary file is updated. But just let me pause here for a second. What i want to do is highlight this, and Ctrl C. 
I'm gonna copy it and then down here, I'm gonna go put it into a text file. 
I'm gonna go ECHO Space, and you can Right Click to Paste the tandy and and we're going to spy 
base put it in a new file called snippets.txt 
You can watch over here when I hit Enter. 
And there is our little snippet right? 
So what's handy about that is: if you're assembling from the Command Line now, I could just, as you know, enter 
 
T Y P E
S for name of file, Tab. 

And there's our list of shortcuts. I only have one in there at the moment.
But now if I want that shortcut, I can just highlight it, hit Enter. It's copied into memory. And then right click over here. It's pasted. And hit Enter and it will compile the binary file, which we've already done. But it overwrote it all with the same thing. 
 
Great! Another cool trick. Let me show you this. 
If you start underneath here and then drag up, and then I'm going to Ctrl C, and then if I right-click observe that it typed the Command AND executed it all it all in one fell swoop. Because 
when I copied it. I also copied the Return. 

Handy little trick, right? Okay, so let's see what else can we do here? Get this out of the way for a second. 
I want to... No, I don't want it to be full screen, thank you. 
Let me look at this again in our binary file real quick.
B Tab 
All set up to be recognized by our Hex editor. There. 
As you can see we wrote two 0s in there there's our two 0s. You see? 
What we've actually written is 00000000 and then the same thing here. There are two bytes of 8 Bits each. 
 
So I could also do this because we've written in and we've written our value in Decimal here, you know? If I said 4. You know that's assumed to be a Decimal value. I could also write in Binary you know. I could just go 00000001, like that. 
B for Binary. And I'm gonna save that. I will head over here. If I go Up Arrow, there's NASM. Go Down Arrow. There is our Binary. And there's the 1 that we wrote in there in Binary language. Okay so I could also write a Word. 
A Data Word there. So let me copy this bit. Ctrl C, Ctrl  V. 
A word being twice as much.
A Binary value that is 16 bytes long. Okay I just put that in there. Save it head on over here Arrow Up twice Enter. Down Arrow once. And there is our Word expressed as two bytes. But it is a 16 Bit value, single number expressed as a 
 
Lower Byte and a Higher Byte. 
Okay, so I'll talk about that a bit here. 
So what I'm doing.  Here I put a value of 1 in the in the Lower Byte and in the other a value of 1. What happens if I change this value to 2 in Binary instead? One two three four six eight. 
Save that. I'm going to head over to our Hex Editor and look at it. Okay, so now this is very interesting here. Observe that we have written a value of 1 and 2, and what we got back is 2, 1.
Okay, so what's up with that? Well the reason for that is: 
it's hardware based essentially. The actual processor in your computer uses a Little Endian system. And what does that mean? Well basically it means if you put in a 1 and a 2 you get back 2, 1. So it's backwards. 
 
Why is that? Well Motorola had a (computer) chip back in the early days which worked normally. We call it Big Endian today. If you put a one and a two in there you get back a one and a two. Okay. Straightforward enough. But then Intel wanted to go into the (computer chip) business.
 
Well, since Motorola was one of their business associates, you know they can't just go start making chips the same way. You might get sued. And so what you do is... 
For all I know this could be the origin of the term 
reverse engineering because when Intel made their chip, just exactly like Motorola's only theirs was in reverse. 
You see? There. No patent infringement there! You know? 
I don't know if you've heard of the movie "Pirates of the Silicon Valley". But there you go. That's America for you, you know. 
So then IBM came out with their first computer, and you know of course IBM owned 20% of Intel at one point.  I dunno. Then they underpriced some of history's best computers right out of business, you know? So today, unfortunately for us, the Bass Awkward chip is the de facto industry standard, right? 
And the common sense chip is pretty much a thing of the past. 
Another of many stumbling blocks due to piracy, and endless obstacles from layers of legacy in the Intel x86architecture.
In fact, in the next video we'll be building a simple bootloader to overcome yet another built-in hardware legacy. The fun never ends here folks! 

Another thing I wanted to show you... Just delete all this. 
Oh, and it asked me "do we want to change the file size?" and we're going to be doing a lot of that later, so don't bother me with that again.
And i can go here to Edit / Insert Bytes. 
And zero bytes? No, how about the 512 Bytes, Random. There.
And this is very interesting too. I don't know if you've ever 
you know you you're in text editor and you try to open a a program and you see something that looks like this a bunch of garble whoa what is that we'll now you know what you're seeing is a text representation of actual code use 
 
see and so here this is can you look at this value here there's the character you know represented by the value fifty five okay you fifty five that's interesting to me 
 
i'm just going to undo 
and let me just set all this back to zero if i can backspace backspace backspace or save i didn't really need to do that but okay so what did i say you 
yeah i'm i'm gonna go back and make this a data byte 
watch this 
 
you 
ok save that 
 
we'll go over here compile it 
look at it and there you go the value is not thirty five five five in hex the the actual value of eighty five 
 
isn't that interesting 
using that a bit later on 
 
like here it's one of this is fun one zero one zero one zero one zero if i change to this to zero we get to the answer to life the universe and everything right hang on 
 
the forty two 
yeah one zero one zero one zero right now you know 
so let me just set this back to zero again what's my lips you go to highlight the whole let me just hit backspace to add or delete it completely hit zero there i'm good i'm just going to say that okay and we're back to our big zero again what's my fascination with zero 
or as well stick around in our next exciting episode we'll be writing a whole lot of nothing so stay tuned