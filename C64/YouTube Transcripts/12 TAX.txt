Moving right along. We just did drawing from Chapter 1, Verse 9 of the good book, C64 Assembly Language Programming PDF free! Okay, so then after you do that, this is nice, the author suggests a couple of exercises. Okay so really from everything you've learned so far you should be able to do all of this right off the top of your head, if I've given you enough repetitions. 
Load the accumulator directly with a 1. Display this screen A in 1024. There you should know how to do that off the top of your head by now, right? Don't forget to put the RTS at the end. If you do not the 60 will run and see what it can find and try to execute this. Okay if you're lucky, yeah! So it could actually go off into the next program that's still residing in memory. If you write a short program, and you had written a longer program before that, you might get the tail end of the previous program.
Write your name in the top left corner of the screen. One possible answer in the book. You should be able to do that by now as well. And here I already gave you this exercise: Put an X in each of the four corners, and I went further to say go ahead and color each one a different color. So you should be able to do all that right off the top of your head. Then he goes on to talk about the Y register which I just explained previously. It's pretty much the same as the X register and here's some rudimentary graphics explaining where things are stored in memory and such. By now you should know or be able to interpret the following; LDA, LDX, LDY, RTS, LDAIM (which is immediate mode you know) LDXIM, LDYIM, STA (store the Accumulator somewhere), STX, store the X register somewhere, store Y, ADC and also in addition to this you should know CLC. Clear the Carry. Let me jump back here for one quickie second here. I'm going to go back to Addition. There. There's the addition where we use Clear Carry to make sure that the mathematical operation was correct, and he also had you throw in this a Clear Decimal which I have found isn't necessary for this particular program, you know. So maybe that was overkill. But it works just as well. Just this bit. Okay that being said... Okay and then here he shows you what I already showed you: That you can do the same thing using X register as Y register. Okay so now we're introducing a new command, T A X. Transfer the contents of the Accumulator into index register X. So let's just do that TAX. Let me save that for the heck of it while we're here and make a new file and this is just TAX. 
Still have the 828 that I copied earlier. Let me go down two lines. Tab in. Let's see what we have heah. T A X. Okay. LDA Immediate Mode.
STA store it to the first slot in screen memory. 
STA store the same value in the color register 55296. So that should give you white. Okay now here's the new command; TAX. Transfer whatever is in the accumulator to the X register. And you don't have to put anything after it. Now that it's in the X register, let's store the value in the X register to, you know what this means. Tell me what's 1026? Okay? 
Let us also store the same value STX at 55298. What does this do people, huh? Good good good! Good answer!
RTS Done. ♩ Dun ♪ dun ♫ dunnn! 
Let's run it. SYS 828. There. Just did the same thing as the previous. Only before he stored the value in the memory location and then drew from that, whereas here he's transferring the value directly from... that's already... the LDA is in the accumulator loaded and put it a couple places, but then also take that same value still residing in the accumulator and transfer it over to one of the registers. Pretty straightforward. Then of course there's some explanations. Transfer A into X. Transfer A into Y, T A Y. Transfer it back! Transfer the X into the A register and transfer Y into the A register. Okay, let's see what the exercises are at the bottom of this chapter 113 that would be 25 in PDF format. Write a program that loads a Z into the accumulator and an A into the X register. Then without any further Immediate Mode commands, swaps these over, and prints the Z on the first screen memory location and the A on the last. A possible answer on page 3. Okay that's a kind of a bit of a trick question because if I'm not mistaken when you go to the solution he uses a a slot in memory, right? So that would be a like STA 900, right? So there he's... think yeah that's a little... he's showing you how to do this, how to do that, how to do the other, and then he throws you a curveball, you know, by saying "Oh remember something we did six exercises back? Use that as a solution!". Okay next exercise. Write a program that loads a diamond into the accumulator, an asterisk into X and an E into Y without using any further immediate mode commands move the E into A, the diamond into X, and the asterisk into Y. Print the diamond to the screen bottom left, the asterisk in the bottom right, and two Es, one in each of the top 2 corners of the screen. Right. Well, so this one you can get away without using memory. This is the one where, you know you're like "I can't do this!" it's you're trying to juggle with these three... with the accumulator and two registers and and they're all full! So how do you transfer? Well trick is you have to use a bit of memory. STA 900, STX 901, or whatever and then transfer them over. Got that. Okay so simple enough exercises you should be able to do based on what you have learned.