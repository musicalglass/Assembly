At the end of the previous video the author of the book gave you a little homework assignment which included loading a diamond and an asterisk. Just in case you may have been sitting there scratching your heads on that one, we want to remember that you can find all of those symbols on the Commodore 64 screen codes. And I recommend bookmarking that. You know, Make a folder of C64, subfolder Assembly or actually the screen codes applies to both. So you know you would need a subfolder just toss those useful links in a bookmark. Because you'll probably reference that fairly frequently. And somewhere in there... there's a heart. Somewhere in here is a diamond and an asterisk. You know, you can find it all yourself, if you like and do the assignment from earlier. I was kind of looking at... oops! let me go back to... yeah. I'm at 100. I could probably zoom into the page a little better and you could actually read what it says on a smaller screen than what I'm using and not have to necessarily consult the book. Okay moving right along. 
Jump Branching and Flags. Okay, we have graduated to chapter 2. First command introduced is Jump. J M P, and then here the diagram is quite helpful. Shows you what's going to happen here. I mean you could probably write the program just based on this flowchart you know if you like. So it's going to be basically similar to BASIC, you know. The GOTO command. I think I have introduced that or have I? Yes I have, on my lessons here, where you got a bit of code here, and for whatever reason you want to jump somewhere else in the program and execute some more code and then maybe jump back. 
So here as you can see from the flow chart. Here's the end of the program RTS. So if the program were to flow straight forward like that it would end here. But we're jumping over the end command and doing some more stuff and then jumping back okay seems fairly straightforward let's give it a run shall we? We'll go to Assembly/. Add a new file JMP.

Good to go. Now just in case, here I'm going to use 828 as the author recommends. But just in case you've been taking the shortcut of using a different address like that. Let me just illustrate and using a SYS call so you didn't have to go type SYS 828. That's not going to work with this program because it has local addresses here. So I recommend using the 828 like so for this program.
Okay. Let's Tab in. LDA Immediate Mode value 1. So yeah all this should start becoming second nature to you by now. Then we're going to Jump to memory location 834 and end of program, although it is jumping further. Done. Let me just for the heck of it we'll put the second bit on another line there. Okay, so store and... what just happened? I must have hit the touchpad. STA. Store the value to... what does this do folks? You know. You know!

You could probably guess what I'm going to do next. I could also point out here at this point in the game that the author adds color to all of the values that he's printing to the screen because in the assembler that came with the book it launches with a gray background. Okay and then if you were to write some bit of code JMP See, I'm trying to talk and write something else at the same time. If you were to write something to the screen according to him. I didn't. I've never actually tried it. It will possibly also print it in gray. So it'll be gray on gray and you won't see anything. So almost all the examples in the book he assigns a color value, you know. But in all honesty that's not necessary we don't need to colorize the letters so I might at some point in proceeding lessons begin to actually omit that. But let's just go with this for now. Jump and END we don't need END. That's a command for the native assembler that comes with the book. There we go. 
Okay, so before I generate and launch this time, let's go back to the options here. And if I go to Assembler... if you have your assembly dump window turned off, let's go ahead and turn that back on so we can look at a few things here. Now I will go ahead and launch that. Invalid Address Mode Jump. Oh see I was talking and typing at the same time and I omitted the actual value. There we go. Okay so there's our assembly dump. Now here. This is where this actually starts becoming useful, I'm saying Jump to 834. Okay. But over here is the values in Hexadecimal. Okay let me take a moment then to point out: I'm using a PC that if you open your calculator, and this is on my version of Windows whatever it is I don't even whatever came with the computer, and you click here you can go to Programmer Mode which is very handy for converting between Hexadecimal, Decimal, Binary, etc., you know. So let's actually make some use of that. I'm using Decimal mode here so I'm set for decimal see? I'm going to input a Hex value and the letters appear over here. I just want to introduce normal numbers you know the kind we're familiar with? And here I'm typing 8 3 4. There is the value in HEX you see? So 342. So there is the 342 in Hexadecimal you see? So when using a Local value, and I'm not going to get into Labels. I understand you can use those but for the purposes of these lessons it's good to understand how the memory locations work and everything. So I'm doing it the author's way by the book here. So that means I could just as easily have... here instead of typing in the decimal value 834 I could have put $342 and get the same result you see? Here jump 833. Just to reiterate 341. So I'm jumping from here to line 341 which is here. So the the Decimal value 833 translates to the Hexadecimal value 341. Okay, let's close that and it should do its thing. Which is to... I've got to go SYS828 to run it. See? So clearly I'm starting at 828 here in memory. Oh, let me do that thing. 833? Let's put the Hex value there instead. Now here $341. So let me just go ahead and use the Hex value. And what did I say 834 was? I'm sorry I'm talking I can't remember that far back 342 $ 342 oops! I'm typing over here because that's active. $342. So in theory these values should be identical. In a different number, "numerology", set of numbers. So, let me just launch that again 
and get out of there.

SYS828 
Yada yada. Okay that works. Great! So as I was also about to explain, if I had used now $1000

try to run that. It loads. Okay. It doesn't give me any errors. But when I okay... so it's no longer SYS828. Although that's still in memory. Oh no it isn't. It is not in memory see that? So it didn't run. Now I'm in $1000 which would be what? SYS4096 is it? 4092? I should know this by now by heart. I'm so embarrassed. Generate SYS call 4096!

So let me use that here just to look at things from different angles. SYS4096 and it does not run. So what have I done incorrectly? Let's find out. Probably entered the wrong Jump in there.

834. What did I say 834 is? 342. Oh, see that? Look at that.
That $342. $342. I did it again. $342. What was the other value here? 833. Did I get that correct or did I... type in there 833. Go back to my calculator. CLEAR 833 should be 341. Okay, so let me just keep the 828 in there for the moment

Oh! I know exactly what I did wrong now. Jesus, in my mind I'm jumping ahead and explaining what I'm gonna talk about next and then I don't do it and somehow I assume that I have. There. Okay, so that works. But now if I change that value to something else it does not work any longer. 
Even if I type the correct 4096 whatever. You see? It doesn't work. Why? Let me kind of show you real quick here. If I go to launch mode and... look over here you see? Instead of 828 we started at, uh what is here? Let's use our calculator here. What is 1 0 0 0? It is 3E8 you see that? So I could put a $ uh wait wait wait! I'm sorry I'm converting Hex to Decimal, not the other way around. Let's go CLEAR. 100 is decimal 4096.

Der! How obvious! I just showed you that a moment ago. 4096! So here all of these values have changed. Now we're starting here at 1000 instead of 828 so none of these values are accurate anymore. Instead of jumping to 342 here. 342. I need to be jumping to 1006, you see? Let's do that. Let me see... 1006 and 1005. Okay so it's going to go ahead and launch... and not work. So I'll just get out of there. What did I just say? 
Jump to 1006. Jump back to 1005. Let's see if I have done this correctly. Let's get out of there.

1 0 0 0 we just discovered is 4 0 9 6. Rrrrt! See? Now it works because we're at the correct memory address. 4096 translates to Hexadecimal 1000 you see? So in this instance since I'm using Local Addresses and saying where to jump, the assembly dump actually comes in useful. See? I can look here and determine what the numbers are. Where I need to jump to. It can be slightly confusing if you've decided to use Decimal values here which I am using for some of these lessons. And whereas over here everything's written in HEX. So you know some people prefer to do everything in HEX you know, whereas I am more or less just sticking with the decimal values. Okay so there you go. Now that I've got this higher value.. oops!

assembly don't. Close that. Now that I have this value in there, I could take the shortcut of using Generate SYS Call, like that. And now these values should work just fine.

and it should just Auto launch.

Yada Yada

There's the value printed to the screen.
So that is Jump.