In this first example I will begin by writing a Program entirely from ones and zeros, 
and then go back and deconstruct

or manually decompile 
the Binary file into an Assembly program. 

So to begin, let's open our Command Prompt, or hang on... 
First let me get my path. 
I'm going to go to Assembly. 
I want to be here. Copy that. 
Copy, 10-4. CD Paste. 

Good to go. 
Alright. I'm going to be using the test file as usual. I want a bootloader to begin with. 
Let me just go COPY 
my magic M Tab to T Tab. 
Put that magic number right in there. 

I do that all the time. 
C O P Y 
Y & T ARE close together. 
That's not forgiving it.
M Tab 
T Tab 

Overwrite?  Yes, indulge me. Thank you. 
Good to go. 
So if I have a look at T Tab now 
there is our magic number expressed in Hexadecimal. We want to express it in Binary.
OK class 
what is the magic number expressed in Binary? 

Who can tell me? Huh? Huh? 
Good! 

0 1 0 1 0 1 0 1 B for Binary. 

And the next line of course. 1 0 1 0 1 0 1 0 in Binary. And that should be good to go. 
Just for the heck of it let's... here 
type our list of shortcuts. 
 
I'm just going to grab that. Copy, Paste. 
And then grab that. 
Copy, Paste.  
and B Tab
 
Run our Binary. Okay, good to go. 
It is booting, which I didn't see 
any reason there should have been a problem, but... 
Now, back to our actual program. Let's write some code in there and we're going to do it using all 1s and 0s! Alright, let's write some Data Bytes. 
So we'll start with 1 0 1 1 
followed by 1 0 0 0 Binary
and 11 in Binary. We know that to be... 2 plus 1 is 3.
Followed by 1 0 0 1 in Binary. Which is what? 8 plus 1 is 9. Okay. I'm just going to plow ahead, 
and go ahead and write some mystery numbers in here, 
and then I'll go back and add the comments and all that. 
1 0 1 1 followed by 1 0 1 1 

Really? 
OK? Binary 
and that'll be what? 4 
followed by Null. (0)

And I don't have to say 0b cause it's universal really. 
DB 1 0 1 1. hmm.
Noting any similarities here? 
Followed by 1 0 0 1, hmm... 
So technically this value and this value are next to each other in memory. 
We are calling commands to the... 
directives to the processor followed by some data. Command, Data. 
And all of these three commands are very close to one another. In fact this one, 
as you can see, all of the preceding numbers are identical on all three of these 
except for the last two digits. This one starts at 0. This is the next one in line, and this one comes a couple after that.

These are again, various direct commands to the Processor. 
So the Processor is going to expect a Command, followed by some Data. 

And that Data could be the 
same number value even.
It just depends on the order in which 
the processor receives them and what it interprets them as. 

OK. So I was nearly complete here and got all sidetracked... 

1, 0 speaking of ones and zeros. Same with the 1. One and zero are the same whether you're speaking in Binary, Hexadecimal, or whatever.
Once you get to 2, then it's different in Binary. 
0 and 1 we can just write it as a Decimal value. 

If you want to be consistent 
you could say Binary. 

But it's all going to be the same to the Processor when it receives that.
OK. We've sent three directives to put some values in Registers so far. 
Now we will do something with those values. 
1 1 0 0. Little bit different place in memory 
1 1 0 1 Binary. 

One zero zero zero zero. 
I forgot the comma apparently there. 
OK, let me just to save all that. 
Have I missed any? Ah ah!

I missed a Binary! I have to specify that it's not ten thousand. 
It is one, two, four, eight... It is 16 in Binary. 
OK?

Ensure that is saved. Good to go.
Head over here, 

and if I Up arrow two times there's NASM. Down arrow one time. 

There we go. We have our beating heart. 
The computer loves ones and zeros. 
That's all it understands technically.
Alright. 
So you may go on to other programs 
or stick around and we will decompile this. 

OK