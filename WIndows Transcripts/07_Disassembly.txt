
We have some raw disassembled assembly code here.
What do we know about it? Let's just state the obvious for starters. 

Move value into a Register. 

If we really wanted to get a little more technical, 
move value into the A register. Also known as the Accumulator 

As we know of course we are actually moving two. The two values in there. Two bytes. And when I say "A" register that's going back historically. Your A Register would have been your 8 Bit register. When your computers were 8 Bit and... let me just run a little info here. 
Since you know, what computer science course would be complete without a professor drawing some squares up on a whiteboard? And so in order to inflate my credibility there's my squares. And of course,  I've drawn eight because it's eight bit. Yes. 
And you could think of them more as containers, 
into which you can put some values. 
You know, back in the day our eight bit register would have been referred to as the A register. 
You also had your B, C and D registers 

We're not gonna go into that. There's more registers these days. 
And so your A register. Then when they went to 16 Bit they added another 8 Bits. Another Byte. And that became your AX register which now had a higher byte and a lower byte. A higher A register (AH) and a lower (AL).

Right, and so of course as we know that's Little Endian. So it's reversed you know. 

So here you know, this value alone would have been 8 Bit. That is 8 Bit from 0 to 255.
This much would be 16 Bit.

This much is 32 Bit, and there's the entire 64 Bit value which HxD Hex Editor suggested, since we are working in a 64 Bit processor. But technically we are only working in 16 Bit.
So these bits are kind of extraneous and irrelevant. 

Not really, no. So let me just kind of trim it down a bit there. Okay, so here we are passing two separate values. As we know, a 3 and a 9 as a single value that gets flipped. 
Let me... just to verify things a little bit here if I may. 

I want to paste a little... let me just grab it here and...
Okay, so this is saved. Why don't I paste over this? 

I think this should be seventeen seventy one to us.
Here I have written the same Assembly code three different ways essentially. Let me save it and we will quickly NASM it and just look at it. We don't have to accumulate 

BA? and hang on hang on hang on. I was just estimating. It should be 72.
B8, B8. There. Okay, it's 72 okay there so now this is the same code written three different ways.
Observe here in the first example when I hard-coded some values, poked them directly into registers, I wrote a 3 and a 9. And guess what i got back? A 3 and a 9, because I am explicitly explicitly writing bytes in the order in which they're received. 

But then of course if I try to pass a whole value it gets flipped. Yeah the 9 and a 3 becomes a 3 and a 9, you know. So another way to do it, as I just showed you earlier, the AX Register also can be broken down into the Higher Byte and the Lower Byte. Each containing the 3 and the 9. 
Let me just copy this and go undo undo undo undo till I get back there. 

So this could in fact be that.
Let me just to comment that out now 

So we have broken it down into two parts. 

Now this Hexadecimal value, let me show you. And I'm not sure if you're aware... I'm gonna copy that Hexadecimal value. If you go to your Windows calculator, and you know here you have your standard mode. It says up here. But if you click here you have programmer mode. Oooooh.

So I can go to Hex like that, and then I'll just paste the value I just copied. 0903 and it tells me it's 2,307 see? So instead of this Hex value I could have just as easily have said in Decimal 2307. But what is good is that to me? You know, this now just 
becomes an arbitrary jumble of numbers. Whereas in Hex you see the first part from 0 to 255 or more specifically from 00 to FF (255), as represented there, and the higher byte is represented there from 0 to 255.
So you can see in some cases it is actually advantageous to use a Hexadecimal value like that because you're working in these 8 Bit chunks, you know. 

So you know. Although in these cases... here this 9, you know could just as easily be a Decimal value. There's no reason it needs to be a Hex value. Just easier to read for me I don't know about you. And so there. Let me just save that. 

Go above but before I do go back and observe though. Here like I said, it's the same thing three different ways as over there and 

so this value 

say how do i get back to copy all of us can i go 

redo whereas redo in here file redo 

no there's no reader okay so i can't go forward but i can just copy it again where it was like this 

Great. 72. Okay there. 
So this 3, 9  is the same as this. 0903 turns into 3,9 right? And here if I put AH and AL separately I don't get the same code in Assembly. However it does go into the same register in 
the processor. You follow? And so here. B8. When we go down here meaning move AX as we know. B8. Meaning MOV AX. But here B4 move the higher register of ...

I'm sorry did I say BX? MOV AX here. Meaning the Higher Byte of the AX Register and B0, the Lower Byte of the AX register it comes across differently from here to there in Assembly. Although to the processor all of these three examples are the exact same thing. 

To make a very very long story short. 

Okay so... 

Kind of felt that needed to be clarified somewhat. 

Okay, so what we do know here i 

we are so like i said it's not really the A register it's the expert i affectionately still recall 

column a registers yeah a register b register c register in sixteen bit referred to in 

in assembly code is AX b excellency CX. Ok copy that. 

so this is your B Register right? And the swan your C register 

And here we're just going to call an Interrupt which as we know is basically just telling it to do it, right there. 

And I could just as easily you know put a comment in here and say magic number. But by now we all know what this is just to look at it right? Yeah, so there you go. 

At this juncture we have successfully marked up our disassembled Assembly code  and we can move on to some other things. 

